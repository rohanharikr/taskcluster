const path = require('path');
const {readRepoFile, modifyRepoFile} = require('./repo');

/**
 * Get an array giving the DB version for each Taskcluster version
 */
exports.getDbReleases = async () => {
  const releases = [];

  for (let line of (await readRepoFile(path.join('db', 'releases.txt'))).split('\n')) {
    line = line.trim();
    if (line.length === 0 || line[0] === '#') {
      continue;
    }
    const [tcVersion, dbVersion] = line.split(':').map(s => s.trim());
    releases.push([tcVersion, parseInt(dbVersion, 10)]);
  }

  return releases;
};

/**
 * Update db/versions/README.md.  This occurs in both `yarn generate` and `yarn release`,
 * so it is included as a utility function here.
 */
exports.updateVersionsReadme = async (schema, releases) => {
  // get the *first* TC version containing this DB version
  const tcversion = dbversion => {
    for (let [tc, db] of releases) {
      if (db >= dbversion) {
        return tc;
      }
    }
  };

  const table = [];
  table.push('| DB Version | TC Version | Description |');
  table.push('| --- | --- | --- |');

  for (let version of schema.versions) {
    const zpad = version.version.toString().padStart(4, '0');
    table.push(`| [${zpad}](./${zpad}.yml) | ${tcversion(version.version) || '(pending release)' } | ${version.description || ''} |`);
  }

  await modifyRepoFile(path.join('db', 'versions', 'README.md'),
    content => content.replace(
      /(<!-- AUTOGENERATED DO NOT EDIT -->)(?:.|\n)*(<!-- AUTOGENERATED DO NOT EDIT - END -->)/m,
      `$1\n${table.join('\n')}\n$2`));
};
