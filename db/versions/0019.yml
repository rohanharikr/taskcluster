version: 19
description: "queue artifacts phase 2 step 1 (slow migration: about 20Î¼s per row in table `queue_artifacts_entities`)"
migrationScript: 0019-migration.sql
downgradeScript: 0019-downgrade.sql
methods:
  queue_artifacts_entities_load:
    deprecated: true
    description: See taskcluster-lib-entities
    mode: read
    serviceName: queue
    args: partition_key text, row_key text
    returns: table (partition_key_out text, row_key_out text, value jsonb, version integer, etag uuid)
    body: |-
      declare
        decoded_composite_key text[];
      begin
        decoded_composite_key := decode_composite_key(queue_artifacts_entities_load.partition_key);
        return query
        select
          queue_artifacts_entities_load.partition_key,
          queue_artifacts_entities_load.row_key,
          entity_buf_encode(
            jsonb_build_object(
              'PartitionKey', queue_artifacts_entities_load.partition_key,
              'RowKey', queue_artifacts_entities_load.row_key,
              'taskId', slugid_to_uuid(task_id),
              'runId', run_id,
              'name', name,
              'storageType', storage_type,
              'contentType', content_type,
              'present', present,
              'expires', expires),
            'details', details::text) as value,
          1 as version,
          queue_artifacts.etag as etag
        from queue_artifacts
        where
          queue_artifacts.task_id = decoded_composite_key[1] and queue_artifacts.run_id = decoded_composite_key[2]::int and queue_artifacts.name = decode_string_key(queue_artifacts_entities_load.row_key);
      end
  queue_artifacts_entities_create:
    deprecated: true
    serviceName: queue
    description: See taskcluster-lib-entities
    mode: write
    args: pk text, rk text, properties jsonb, overwrite boolean, version integer
    returns: uuid
    body: |-
      declare
        new_row queue_artifacts%ROWTYPE;
      begin
        select
          uuid_to_slugid(properties ->> 'taskId'),
          (properties ->> 'runId')::integer,
          (properties ->> 'name')::text,
          (properties ->> 'storageType')::text,
          (properties ->> 'contentType')::text,
          entity_buf_decode(properties, 'details')::jsonb,
          (properties ->> 'present')::boolean,
          (properties ->> 'expires')::timestamptz,
          public.gen_random_uuid()
        into new_row;
        if overwrite then
          raise exception 'overwrite not implemented';
        else
          execute 'insert into queue_artifacts select $1.*' using new_row;
        end if;
        return new_row.etag;
      end
  queue_artifacts_entities_remove:
    deprecated: true
    serviceName: queue
    description: See taskcluster-lib-entities
    mode: write
    args: partition_key text, row_key text
    returns: table (etag uuid)
    body: |-
      declare
        decoded_composite_key text[];
      begin
        decoded_composite_key := decode_composite_key(queue_artifacts_entities_remove.partition_key);
        return query delete from queue_artifacts
        where
          queue_artifacts.task_id = decoded_composite_key[1] and queue_artifacts.run_id = decoded_composite_key[2]::int and queue_artifacts.name = decode_string_key(queue_artifacts_entities_remove.row_key)
        returning queue_artifacts.etag;
      end
  queue_artifacts_entities_modify:
    deprecated: true
    serviceName: queue
    description: See taskcluster-lib-entities
    mode: write
    args: partition_key text, row_key text, properties jsonb, version integer, old_etag uuid
    returns: table (etag uuid)
    body: |-
      declare
        new_row queue_artifacts%ROWTYPE;
        decoded_composite_key text[];
      begin
        decoded_composite_key := decode_composite_key(queue_artifacts_entities_modify.partition_key);
        select
          (properties ->> 'taskId')::text,
          (properties ->> 'runId')::integer,
          (properties ->> 'name')::text,
          (properties ->> 'storageType')::text,
          (properties ->> 'contentType')::text,
          entity_buf_decode(properties, 'details')::jsonb,
          (properties ->> 'present')::boolean,
          (properties ->> 'expires')::timestamptz,
          public.gen_random_uuid()
        into new_row;
        update queue_artifacts
        set (
          storage_type,
          content_type,
          details,
          present,
          expires,
          etag
        ) = (
          new_row.storage_type,
          new_row.content_type,
          new_row.details,
          new_row.present,
          new_row.expires,
          new_row.etag
        )
        where
          queue_artifacts.task_id = decoded_composite_key[1] and
          queue_artifacts.run_id = decoded_composite_key[2]::int and
          queue_artifacts.name = decode_string_key(queue_artifacts_entities_modify.row_key) and
          queue_artifacts.etag = queue_artifacts_entities_modify.old_etag;
        if found then
          return query select new_row.etag;
          return;
        end if;
        perform queue_artifacts.etag from queue_artifacts
        where
          queue_artifacts.task_id = decoded_composite_key[1] and
          queue_artifacts.run_id = decoded_composite_key[2]::int and
          queue_artifacts.name = decode_string_key(queue_artifacts_entities_modify.row_key);
        if found then
          raise exception 'unsuccessful update' using errcode = 'P0004';
        else
          raise exception 'no such row' using errcode = 'P0002';
        end if;
      end
  queue_artifacts_entities_scan:
    deprecated: true
    description: See taskcluster-lib-entities
    mode: read
    serviceName: queue
    args: pk text, rk text, condition text, size integer, page integer
    returns: table (partition_key text, row_key text, value jsonb, version integer, etag uuid)
    body: |-
      declare
        cond text[];
        exp_cond_operator text;
        exp_cond_operand timestamptz;
        partition_key_var text;
        row_key_var text;
        decoded_composite_key text[];
      begin
        decoded_composite_key := decode_composite_key(queue_artifacts_entities_scan.pk);
        if not condition is null then
          cond := regexp_split_to_array(condition, '\s+');
          exp_cond_operator := cond[4];
          exp_cond_operand := cond[5] :: timestamptz;

          return query select
            encode_composite_key(queue_artifacts.task_id, queue_artifacts.run_id::text) as partition_key,
            encode_string_key(queue_artifacts.name) as row_key,
            entity_buf_encode(
              jsonb_build_object(
                'PartitionKey', encode_composite_key(queue_artifacts.task_id, queue_artifacts.run_id::text),
                'RowKey', name,
                'taskId', slugid_to_uuid(task_id),
                'runId', run_id,
                'name', name,
                'storageType', storage_type,
                'contentType', content_type,
                'present', present,
                'expires', expires
              ),
            'details', details::text) as value,
            1 as version,
            queue_artifacts.etag as etag from queue_artifacts
          where
            (queue_artifacts_entities_scan.pk is null or queue_artifacts_entities_scan.pk = decoded_composite_key[1] || '~' || decoded_composite_key[2]) and
            (queue_artifacts_entities_scan.rk is null or queue_artifacts_entities_scan.rk = name) and
            case
              when exp_cond_operator = '=' then expires = exp_cond_operand
              when exp_cond_operator = '<' then expires < exp_cond_operand
              when exp_cond_operator = '<=' then expires <= exp_cond_operand
              when exp_cond_operator = '>' then expires > exp_cond_operand
              when exp_cond_operator = '>=' then expires >= exp_cond_operand
              else expires <> exp_cond_operand
            end
          order by queue_artifacts.task_id, queue_artifacts.run_id, queue_artifacts.name
          limit case
            when (size is not null and size > 0) then size + 1
            else null
          end
          offset case
            when (page is not null and page > 0) then page
            else 0
          end;
        else
          return query select
            encode_composite_key(queue_artifacts.task_id, queue_artifacts.run_id::text) as partition_key,
            encode_string_key(queue_artifacts.name) as row_key,
            entity_buf_encode(
              jsonb_build_object(
                'PartitionKey', encode_composite_key(queue_artifacts.task_id, queue_artifacts.run_id::text),
                'RowKey', name,
                'taskId', slugid_to_uuid(task_id),
                'runId', run_id,
                'name', name,
                'storageType', storage_type,
                'contentType', content_type,
                'present', present,
                'expires', expires),
              'details', details::text) as value,
            1 as version,
            queue_artifacts.etag as etag from queue_artifacts
          where
            (queue_artifacts_entities_scan.pk is null or (queue_artifacts.task_id = decoded_composite_key[1] and queue_artifacts.run_id = decoded_composite_key[2]::int)) and
            (queue_artifacts_entities_scan.rk is null or queue_artifacts_entities_scan.rk = name)
          order by queue_artifacts.task_id, queue_artifacts.run_id, queue_artifacts.name
          limit case
            when (size is not null and size > 0) then size + 1
            else null
          end
          offset case
            when (size is not null and size > 0 and page is not null and page > 0) then page
            else 0
          end;
        end if;
      end
